0x100

I N T R O D U C T I O N

The idea of hacking may conjure stylized images of 
electronic vandalism, espionage, dyed hair, and body 
piercings. Most people associate hacking with breaking 
the law and assume that everyone who engages in hack-
ing activities is a criminal. Granted, there are people out 
there who use hacking techniques to break the law, but hacking isnt really 
about that. In fact, hacking is more about following the law than breaking it. 
The essence of hacking is finding unintended or overlooked uses for the 
laws and properties of a given situation and then applying them in new and 
inventive ways to solve a problemwhatever it may be.

The following math problem illustrates the essence of hacking:

Use each of the numbers 1, 3, 4, and 6 exactly once with any 
of the four basic math operations (addition, subtraction, 
multiplication, and division) to total 24. Each number must be 
used once and only once, and you may define the order of 
operations; for example, 3 * (4 + 6) + 1 = 31 is valid, however 
incorrect, since it doesnt total 24.

\x0cThe rules for this problem are well defined and simple, yet the answer 

eludes many. Like the solution to this problem (shown on the last page of 
this book), hacked solutions follow the rules of the system, but they use those 
rules in counterintuitive ways. This gives hackers their edge, allowing them to 
solve problems in ways unimaginable for those confined to conventional 
thinking and methodologies.

 Since the infancy of computers, hackers have been creatively solving 

problems. In the late 1950s, the MIT model railroad club was given a dona-
tion of parts, mostly old telephone equipment. The clubs members used this 
equipment to rig up a complex system that allowed multiple operators to con-
trol different parts of the track by dialing in to the appropriate sections. They 
called this new and inventive use of telephone equipment hacking ; many 
people consider this group to be the original hackers. The group moved on 
to programming on punch cards and ticker tape for early computers like the 
IBM 704 and the TX-0. While others were content with writing programs that 
just solved problems, the early hackers were obsessed with writing programs 
that solved problems well. A new program that could achieve the same result 
as an existing one but used fewer punch cards was considered better, even 
though it did the same thing. The key difference was how the program 
achieved its resultselegance.

Being able to reduce the number of punch cards needed for a program 
showed an artistic mastery over the computer. A nicely crafted table can hold 
a vase just as well as a milk crate can, but one sure looks a lot better than the 
other. Early hackers proved that technical problems can have artistic solu-
tions, and they thereby transformed programming from a mere engineering 
task into an art form. 

Like many other forms of art, hacking was often misunderstood. The few 
who got it formed an informal subculture that remained intensely focused 
on learning and mastering their art. They believed that information should 
be free and anything that stood in the way of that freedom should be circum-
vented. Such obstructions included authority figures, the bureaucracy of 
college classes, and discrimination. In a sea of graduation-driven students, 
this unofficial group of hackers defied conventional goals and instead pursued 
knowledge itself. This drive to continually learn and explore transcended 
even the conventional boundaries drawn by discrimination, evident in the 
MIT model railroad clubs acceptance of 12-year-old Peter Deutsch when 
he demonstrated his knowledge of the TX-0 and his desire to learn. Age, 
race, gender, appearance, academic degrees, and social status were not 
primary criteria for judging anothers worthnot because of a desire for 
equality, but because of a desire to advance the emerging art of hacking. 

 The original hackers found splendor and elegance in the conventionally 
dry sciences of math and electronics. They saw programming as a form of 
artistic expression and the computer as an instrument of that art. Their desire 
to dissect and understand wasnt intended to demystify artistic endeavors; it 
was simply a way to achieve a greater appreciation of them. These knowledge-
driven values would eventually be called the Hacker Ethic: the appreciation 
of logic as an art form and the promotion of the free flow of information, 
surmounting conventional boundaries and restrictions for the simple goal of 

2

0x 100

\x0cbetter understanding the world. This is not a new cultural trend; the 
Pythagoreans in ancient Greece had a similar ethic and subculture, despite 
not owning computers. They saw beauty in mathematics and discovered many 
core concepts in geometry. That thirst for knowledge and its beneficial by-
products would continue on through history, from the Pythagoreans to Ada 
Lovelace to Alan Turing to the hackers of the MIT model railroad club. 
Modern hackers like Richard Stallman and Steve Wozniak have continued 
the hacking legacy, bringing us modern operating systems, programming 
languages, personal computers, and many other technologies that we use 
every day. 

 How does one distinguish between the good hackers who bring us the 
wonders of technological advancement and the evil hackers who steal our 
credit card numbers? The term cracker was coined to distinguish evil hackers 
from the good ones. Journalists were told that crackers were supposed to be 
the bad guys, while hackers were the good guys. Hackers stayed true to the 
Hacker Ethic, while crackers were only interested in breaking the law and 
making a quick buck. Crackers were considered to be much less talented 
than the elite hackers, as they simply made use of hacker-written tools and 
scripts without understanding how they worked. Cracker was meant to be the 
catch-all label for anyone doing anything unscrupulous with a computer
pirating software, defacing websites, and worst of all, not understanding what 
they were doing. But very few people use this term today.

 The terms lack of popularity might be due to its confusing etymology
cracker originally described those who crack software copyrights and reverse 
engineer copy-protection schemes. Its current unpopularity might simply 
result from its two ambiguous new definitions: a group of people who engage 
in illegal activity with computers or people who are relatively unskilled hackers. 
Few technology journalists feel compelled to use terms that most of their 
readers are unfamiliar with. In contrast, most people are aware of the mystery 
and skill associated with the term hacker, so for a journalist, the decision to 
use the term hacker is easy. Similarly, the term script kiddie is sometimes used 
to refer to crackers, but it just doesnt have the same zing as the shadowy 
hacker. There are some who will still argue that there is a distinct line between 
hackers and crackers, but I believe that anyone who has the hacker spirit is a 
hacker, despite any laws he or she may break.

The current laws restricting cryptography and cryptographic research 
further blur the line between hackers and crackers. In 2001, Professor Edward 
Felten and his research team from Princeton University were about to publish 
a paper that discussed the weaknesses of various digital watermarking schemes. 
This paper responded to a challenge issued by the Secure Digital Music 
Initiative (SDMI) in the SDMI Public Challenge, which encouraged the 
public to attempt to break these watermarking schemes. Before Felten and 
his team could publish the paper, though, they were threatened by both the 
SDMI Foundation and the Recording Industry Association of America (RIAA). 
The Digital Millennium Copyright Act (DCMA) of 1998 makes it illegal to 
discuss or provide technology that might be used to bypass industry con-
sumer controls. This same law was used against Dmitry Sklyarov, a Russian 
computer programmer and hacker. He had written software to circumvent 

In t ro duc ti on

3

\x0coverly simplistic encryption in Adobe software and presented his findings at a 
hacker convention in the United States. The FBI swooped in and arrested 
him, leading to a lengthy legal battle. Under the law, the complexity of the 
industry consumer controls doesnt matterit would be technically illegal to 
reverse engineer or even discuss Pig Latin if it were used as an industry con-
sumer control. Who are the hackers and who are the crackers now? When 
laws seem to interfere with free speech, do the good guys who speak their 
minds suddenly become bad? I believe that the spirit of the hacker transcends 
governmental laws, as opposed to being defined by them.

The sciences of nuclear physics and biochemistry can be used to kill, 

yet they also provide us with significant scientific advancement and modern 
medicine. Theres nothing good or bad about knowledge itself; morality lies 
in the application of knowledge. Even if we wanted to, we couldnt suppress 
the knowledge of how to convert matter into energy or stop the continued 
technological progress of society. In the same way, the hacker spirit can 
never be stopped, nor can it be easily categorized or dissected. Hackers will 
constantly be pushing the limits of knowledge and acceptable behavior, 
forcing us to explore further and further.

Part of this drive results in an ultimately beneficial co-evolution of 

security through competition between attacking hackers and defending 
hackers. Just as the speedy gazelle adapted from being chased by the cheetah, 
and the cheetah became even faster from chasing the gazelle, the competi-
tion between hackers provides computer users with better and stronger 
security, as well as more complex and sophisticated attack techniques. The 
introduction and progression of intrusion detection systems (IDSs) is a prime 
example of this co-evolutionary process. The defending hackers create IDSs 
to add to their arsenal, while the attacking hackers develop IDS-evasion 
techniques, which are eventually compensated for in bigger and better IDS 
products. The net result of this interaction is positive, as it produces smarter 
people, improved security, more stable software, inventive problem-solving 
techniques, and even a new economy.

The intent of this book is to teach you about the true spirit of hacking. 

We will look at various hacker techniques, from the past to the present, 
dissecting them to learn how and why they work. Included with this book is 
a bootable LiveCD containing all the source code used herein as well as a 
preconfigured Linux environment. Exploration and innovation are critical 
to the art of hacking, so this CD will let you follow along and experiment on 
your own. The only requirement is an x 86 processor, which is used by all 
Microsoft Windows machines and the newer Macintosh computersjust 
insert the CD and reboot. This alternate Linux environment will not disturb 
your existing OS, so when youre done, just reboot again and remove the CD. 
This way, you will gain a hands-on understanding and appreciation for hacking 
that may inspire you to improve upon existing techniques or even to invent 
new ones. Hopefully, this book will stimulate the curious hacker nature in you 
and prompt you to contribute to the art of hacking in some way, regardless of 
which side of the fence you choose to be on.

4

0x 100

\x0c0x200

P R O G R A M M I N G

Hacker is a term for both those who write code and 
those who exploit it. Even though these two groups of 
hackers have different end goals, both groups use similar 
problem-solving techniques. Since an understanding 
of programming helps those who exploit, and an under-
standing of exploitation helps those who program, many 
hackers do both. There are interesting hacks found in both the techniques 
used to write elegant code and the techniques used to exploit programs. 
Hacking is really just the act of finding a clever and counterintuitive 
solution to a problem. 

The hacks found in program exploits usually use the rules of the 
computer to bypass security in ways never intended. Programming hacks are 
similar in that they also use the rules of the computer in new and inventive 
ways, but the final goal is efficiency or smaller source code, not necessarily a 
security compromise. There are actually an infinite number of programs that

\x0ccan be written to accomplish any given task, but most of these solutions are 
unnecessarily large, complex, and sloppy. The few solutions that remain 
are small, efficient, and neat. Programs that have these qualities are said to 
have elegance, and the clever and inventive solutions that tend to lead to 
this efficiency are called hacks. Hackers on both sides of programming 
appreciate both the beauty of elegant code and the ingenuity of clever hacks.
In the business world, more importance is placed on churning out func-

tional code than on achieving clever hacks and elegance. Because of the 
tremendous exponential growth of computational power and memory, 
spending an extra five hours to create a slightly faster and more memory-
efficient piece of code just doesnt make business sense when dealing with 
modern computers that have gigahertz of processing cycles and gigabytes of 
memory. While time and memory optimizations go without notice by all but 
the most sophisticated of users, a new feature is marketable. When the 
bottom line is money, spending time on clever hacks for optimization just 
doesnt make sense. 

True appreciation of programming elegance is left for the hackers: 
computer hobbyists whose end goal isnt to make a profit but to squeeze 
every possible bit of functionality out of their old Commodore 64s, exploit 
writers who need to write tiny and amazing pieces of code to slip through 
narrow security cracks, and anyone else who appreciates the pursuit and the 
challenge of finding the best possible solution. These are the people who get 
excited about programming and really appreciate the beauty of an elegant 
piece of code or the ingenuity of a clever hack. Since an understanding of 
programming is a prerequisite to understanding how programs can be 
exploited, programming is a natural starting point.

Programming is a very natural and intuitive concept. A program is nothing 
more than a series of statements written in a specific language. Programs are 
everywhere, and even the technophobes of the world use programs every day. 
Driving directions, cooking recipes, football plays, and DNA are all types of 
programs. A typical program for driving directions might look something 
like this:

Start out down Main Street headed east. Continue on Main Street until you see 
a church on your right. If the street is blocked because of construction, turn 
right there at 15th Street, turn left on Pine Street, and then turn right on 
16th Street. Otherwise, you can just continue and make a right on 16th Street. 
Continue on 16th Street, and turn left onto Destination Road. Drive straight 
down Destination Road for 5 miles, and then you'll see the house on the right. 
The address is 743 Destination Road.

Anyone who knows English can understand and follow these driving 

directions, since theyre written in English. Granted, theyre not eloquent, 
but each instruction is clear and easy to understand, at least for someone 
who reads English. 

0x210 What Is Programming?

6

0x 200

\x0c"
